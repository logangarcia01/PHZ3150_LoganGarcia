Logan Garcia

Log for PHZ3150 Fall 2022

***** IN : Thursday Aug 25 12:42 pm ET 2022 *****

Opened TextEdit, started this log, saved as:  
Desktop/0-phz3150-LoganGarcia.log

Downloaded anaconda navigator

***** OUt : Thursday Aug 25 1:21 pm ET 2022 *****

***** IN : Friday Aug 26 10:35 pm ET 2022 *****

UCF Physics PHZ 3150: Introduction to Numerical Computing

Name: Logan Garcia

Email: logan.garcia2000@knights.ucf.edu

Phone: 803-818-8354

Major: Interdisiplinary Studies

Year: 5th year

ID: lo492446

How did you hear about this course?

It was on a list of courses to take with my physics minor

Do you have a laptop you can bring to class, install software on, etc.?

Yes

What operating system and version does it run?

Windows 10

How much free disk space does it have?

43GB

What operating systems are you comfortable working in?

Windows

What computer classes have you taken, including high school,
extracurricular, etc.?

Computer intergrated manufacturing

Have you ever programmed a computer?

yes, with my father

In what language(s)?

C

Summarize your experience:

very frustrating

Have you taken statistics or probability?

No

Why are you taking this course?

For my phsics minor

Are there particular topics you hope to learn?

No there is not.

If you have worked with scientific data or modeling before, briefly
describe your experience:

N/A

Have you ever been involved with a science club or similar?  If so,
describe:

N/A

***** OUT : Friday Aug 26 10:49 pm ET 2022 *****

***** IN : Thursday  Sep 1 11:32 am ET 2022 *****

Installed the Anaconda Navigator. Was quite simple, typed it in on google and hit download. Once it was finished i had all the programs needed (jupyter notebook, etc...)
 URL : https://docs.anaconda.com/anaconda/navigator/
 installed on desktop.

**** Out : Thursday Sep 1 11:57 am ET 2022 *****

**** IN : Tuesday Sep 6 12:00 pm ET 2022 ****
had a lecture about functions, creating lists, slicing, and tuples.

**** Out : Tuesday Sep 6 1:20 pm ET 2022 ****

**** IN : Thursday Sep 8 9:06 am ET 2022 ****

Problem 1 (5 points). Make a new folder named hw3_<yourname> under your 
homework folder. For this assignment, your log is now just a part of your homework. In 
one of the entries, it should identify the start and end of HW3 and list the problem 
numbers in order. After each problem number, give your answer and the names of any 
files you are handing in for each problem. If you made a HW3 entry in your log in a prior 
session and want to change it, just copy it to the current (last) session, and edit there. 
We will grade the last entry only. All text related to one assignment should be in one 
entry, with the problems done in order.

Created a Hw3 file on computer, and github.

Problem 2. (30 points total) We will continue our practice using Git. You will add a new 
directory from your computer to a new repository. Remember that to add a new repo 
from the GitHub Desktop app, you can go to File ‚Üí New Repository ‚Üí then, in the pop 
up window name your repository and determine its local path (e.g., in class we pointed 
to where phz3150/ is in your laptop). If you have already set a local repository up, you 
can go to File ‚Üí Add Local Repository. Then you can publish your repository to your 
personal GitHub account (chose ‚Äúorganization: None‚Äù option). If you now go to the 
GitHub webpage, it will appear under your repositories.

a) (5 points) If you haven‚Äôt done so yet, set up the GitHub repository (get the 
GitHub desktop app, and set your name and email for the Git log). Explain how 
you did it in your log (use past notes, or from memory if you did it in the 
classroom last Tuesday).

Created a repository in github by clicking create a repository after setting up an account and naming it PHZ3150_LoganGarcia and made a local path on my laptop.

b) I. (2.5 points) If you haven‚Äôt done so yet, put your course log under 
revision control. In your log explain how you did this in detail (again, use 
past notes, or from memory if you did it in the classroom last Tuesday). 
Your log should contain information about how you added the file to the 
list of files Git keeps a track of, how you committed the file (including the 
commit message) and how you made sure there is a backup on GitHub.

placed course log in repository and is under revision control which means a short summary is needed any time a change is made to it.

II. (2.5 points) Use your favorite browser to navigate to your personal 
GitHub repository. Find your phz3150/ repository and click on it. Make a 
screenshot of the browser showing that the folder contains your log, and 
all the folders of your phz3150/ folder. Rename the screenshot using the 
appropriate naming conventions and add it to your hw3_<yourname>
folder.

took a screen shot showing log was placed in repository.

c) (5 points) Make a new folder named test_git in your computer (can be 
anywhere, you can delete it later on). Put it under revision control. Explain how 
you did this in your log (up to, but not including, publishing it).

Created test_git file on desktop.

d) (1 point) Take file hw1-survey.txt from Webcourses. Move it to your test_git 
folder.
(2 points) Go to the GitHub desktop app. Get a screenshot that shows the status 
of the repository on the GitHub Desktop app (i.e., that something was added). 
(1 point) Commit the change with an informative comment. 
(2 points) Once done, remove the file from the test_git folder. Go to the 
GitHub desktop app. Get a screenshot that shows the status of the repository 
changed (i.e., that something was removed). 
(1 point) Commit the change with an informative comment. 
(1 point) Explain how you did all these to your log. 
(2 points) Rename the screenshots using the appropriate naming conventions 
and add them to your hw3_<yourname> folder.

Added Hw1-survey from webcourses to my test_git file on my repository, opened github app, 
placed a brief summary then commited to main, and pushed orgin. 
then deleted file from folder went back to app put a summary, then comitted to main and pushed to origin again deleting it.

(5 points) Make a screenshot of the commit history for your log (showing all the 
commit messages, when they were made, and by whom).

took screenshot.

Problem 3. (10 points total) Start Jupyter. Navigate to your hw3_<yourname> folder 
and start a new Python 3 notebook. 

(2 points) Change the name of the notebook to hw3_<yourname>.ipynb (remember, 
the extension is automatically set from Jupyter).

(2 points) Use Markdown to write a descriptive text about your notebook at the start of 
the notebook (something like ‚Äúpractice notebook‚Äù ‚Ä¶).

(2 points) Define variable x equal to 10 and variable y equal to 100. Define variable z
equal to the product of x and y and variable w equal to the difference of y and x. Print 
z and w.

(2 points) Make a variable named min that is equal to 3. What do you notice? Is min a 
good name to use for your variable? Why/ why not? Explain in your Jupyter notebook
(make a comment in your notebook using #, do not do it in markdown).

(2 points) Make a variable q equal to 1. Print q. Add one to q. Print q. In one line 
multiply q by 10 and print the result.

All parts done in juypter file in hw3 folder.

**** Out : Sep 8 10:05 am ET 2022 ****

**** In : Sep 21 4:50 pm ET 2022 ****

Created a Hw5_LoganGarcia folder and also added HW5 PDF to the folder and commited it to main.

Problem 1 (5 points). Make a new folder named hw5_<yourname>.  
For this homework your main homework file is a Python file named  
hw5_<username>.ipynb.  Save it in your homework folder. Remember to commit  
your files and push to GitHub (also, great backup!). Your name, assignment number,  
and the date should appear as comments at the top of the notebook. At the start of  
every problem, write the problem number using markdown comments. Any remarks or  
written answers you may make should also be written with markdown. If you need to  
comment something in the code (for coding clarity) do so with a normal comment (i.e., #  
this is a comment). Print the problem number (as in ‚ÄúProblem 1:‚Äù) before each  
problem‚Äôs output. Use the print() function to print, don‚Äôt just type the expression.  
 
Start your notebook by importing numpy.

**** Out : Sep 21 5:00 pm ET 2022 ****
**** In : Sep 22 10:25 am ET 2022 ****

Problem 2 (15 points).  Recall the quadratic formula ùë• =‚àíùëè¬±‚àöùëè2‚àí4ùëéùëê
2ùëé , which solves for 
the roots of  ùëéùë•2 +ùëèùë•+ùëê =0. Write a function that calculates and returns a list 
containing both of the roots, given the three coefficients. Be sure to include a docstring! 
What does it need to include? Calculate the roots of ùë•2 ‚àíùë•‚àí12 =0, returning them 
directly into two variables. Print them. 

This problem gave me issues so i skipped it after some time.

Problem 3 (10 points).  Create a list student_h that contains lists with the heights of 
students in feet and inches. A person being 5' 6" would be noted as [5, 6], a person 
being 5' 10" would be noted as [5, 10] etc. Populate it with the heights of five students 
who are : 5‚Äô 1‚Äù, 4‚Äô 10‚Äù, 6‚Äô 02‚Äù, 5‚Äô 07‚Äù, and 6‚Äô 11‚Äù.  
Create a function ft_to_m_cm that takes as input a value from student_h and  
returns each height in a new list [m, cm] (round cm up). Call the function for all values of  
student_h and print the results with an informative sentence (e.g., Student 1 has a  
height of 1 m 10 cm )  (Remember that 1 ft ~= 0.3048 m and 1 inch ~= 0.0254 m and  
1m has 100cm). 

For this problem i got everything to work, except the print statement.

Problem 4 (20 points). Create a function displacement(u_init, t ,a) that 
calculates the total displacement of a body during a time interval t, when the body has 
initial speed u_init and a constant acceleration a. Save it in a separate .py file, not 
your main homework file. Remember to start the function with a proper docstring.  
The displacement of a body that moves with a constant acceleration will be:  
s=u_init*t+0.5*a*t2, where t is the total time the object moves, a the  
constant acceleration and u_init the initial speed of the body. In your main homework  
file import the function and calculate the total displacement for u_init=0, a=[10, 
20, 30] and t=[2,4,14]. Again, calculate these numbers some other way to check 
that they are correct, and write on your log how you checked it. 


Problem 5 (10 points).  Prepare and submit your homework. Copy the finalized Jupyter  
notebook to the handin/hw5_* folder and don‚Äôt forget to commit and push it to  
GitHub. Explain what you did to do that in your log. Make a screenshot that shows you  
committed the file and add it to your handin/hw5_* folder (remember to use an  
appropriate name for the screenshot!). Write what you did to make and submit the zip  
file into your log. When satisfied, close the log, copy it to your homework directory one  
last time, and make the zip file. Turn the file in on WebCourses. 

Commit everything to main and upload to github, and then took the file on my computer and compressed it to a Zipfile and then submitted to webcourses.

**** In: Oct 6 9:58 am ET 2022 ****


Problem 1 (5 points). For this homework you should make a new folder called HW6/.  
Your main homework file is a Python file named hw6_<username>.ipynb.  Save it under 
HW6/ . Remember to commit your file often and push it to GitHub (also, great backup!). 
We will check this as part of your grading!  
Your name, assignment number, and the date should appear as comments at the top 
using markdown. Put the problems numbers in markdown comments, as well as any 
remarks or written answers you may make. If you need to comment something in the 
code (for clarity) do so with a normal comment. Print the problem number (as in 
‚ÄúProblem 1:‚Äù) on a line by itself before each problem‚Äôs output. Use the print() 
function to print, don‚Äôt just type the expression.  

i easily printed problem 1 as a print function in notebook and also printed done.

Problem 2 (15 points). Import numpy and matplotlib.pyplot. Create 
a numpy array x that goes from 1 up to and including 100 (last element must be 
100.0) with a step of 0.5. Create array y that is the log10 of x and array z that is equal 
to the square root of x. Plot y(x) and z(x) in the same plot. Manually specify different 
colors, line styles, line thicknesses, markers (and their size) and tickmarks for your plot. 
Add titles to your plot axis. Make sure they are legible. Save it as a pdf file using the 
appropriate naming conventions.

had an issue making the lines follow my x values till i figured out i was not using the x values, then i made it x,y and x,z to use the x values


Problem 3. (15 points) Create a numpy array q that has the values: 45, 24, 5 ,30 , 3, 
67, 33, 60, 65, 13, 82, 75, 21, 77, 67, 8, 86, 62, 23, 70, 11, 70, 21, 15, 84, 51, 6, 79, 78, 
66,  2, 93, 49, 74, 23, 85, 25, 38, 1, 89 . Print the array. Print the locations where q is 
larger than 50. Print, in one command, the elements of q that are larger than 50 and 
smaller than 70.   
  
Make a list q_list out of q. Print the 12th up to and including the 14th elements of  
the list q_list. Change element 28 of the list to be 42.0. Does it work? Why/ why not? 
Explain.    
 
Make a tuple q_tuple out of q. Print the 20th element of q_tuple. Change  
element 21 of q_tuple to be 44.0. Does it work? Why/ why not? Explain.   
  
Create a list of strings word_list that contains the words ‚Äòtwinkle‚Äô, ‚Äòtwinkle‚Äô, ‚Äòlittle‚Äô,  
‚Äòstar‚Äô. Scan every word (one by one is fine, we haven‚Äôt talked about for loops yet) of  
your list and find out which words contain a ‚Äòe‚Äô, and which words contain an ‚Äòa‚Äô. Also, 
find the index of the letter ‚Äòe‚Äô and ‚Äòa‚Äô in the word (e.g., in Mary ‚Äòa‚Äô is on 1). Is word ‚Äòstar‚Äô 
or ‚Äòbright‚Äô in your word_list? Write the code to test it.  

making the array was easy as well as finding the elements that were larger. then making the list and tuple were easy too. i did not know how to do the last part so i skipped it.

Problem 4 (15 points). Create a function word_to_number that takes as input an 
English word that corresponds to a number from 0 to 20 (‚Äòzero‚Äô, ‚Äòone‚Äô etc) and returns 
the corresponding number (0, 1, etc). In the function create a dictionary that maps every 
appropriate English word to the corresponding number (so 1 will be mapped to ‚Äòone‚Äô ). 
The keys should be your words and the values the number. Remember to write an 
appropriate docstring for your function! In the main program call the function for: ‚Äòthree‚Äô, 
‚Äòseven‚Äô, ‚Äòtwelve‚Äô , ‚Äòsixteen‚Äô and ‚Äònineteen‚Äô and print an informative statements (e.g., ‚Äú 
‚Äòthree‚Äô is 3 ‚Äú ). 

Problem 5 (10 points).  Prepare and submit your homework. Copy the finalized Jupyter  
notebook to the handin/hw6_* folder and don‚Äôt forget to commit and push it to  
GitHub. Explain what you did to do that in your log. Make a screenshot that shows you  
committed the file and add it to your handin/hw6_* folder (remember to use an  
appropriate name for the screenshot!). Write what you did to make and submit the zip  
file into your log. When satisfied, close the log, copy it to your homework directory one  
last time, and make the zip file. Turn the file in on WebCourses. 

Commit everything to main and upload to github, and then took the file on my computer and compressed it to a Zipfile and then submitted to webcourses.

***In: Oct 18 8:00 AM ET 2022 ***

Problem 1 (5 points). Make a new folder named hw7_ under you HW folder. As before, your main homework file is a Python file named
hw7_.ipynb. Save it in your homework folder. Remember to commit
your files and push to GitHub (also, great backup!). Your name, assignment number,
and the date should appear as comments at the top of the notebook. Any remarks or
written answers you may make should be written with markdown. If you need to
comment something in the code (for coding clarity) do so with a normal comment (i.e., #
this is a comment). Print the problem number (as in ‚ÄúProblem 1:‚Äù) before each
problem‚Äôs output. Use the print() function to print, don‚Äôt just type the expression. Start
your notebook by importing numpy.

did this with ease as it is required every HW

Problem 2 (15 points). For loops automatically iterate over a parameter i (unlike while loops). They start from i=0 (or whichever value you ask), do what you want them to do and then automatically do i = i+1 (i+=1). Writing an extra i = i+1 can create accidental bugs in for loops, while missing a i = i+1 can make your while loops run an infinite time.

Code a program that scans the sentence: ‚ÄúDeleting an item from a list or array while iterating over it is a Python problem that is well known to any experienced software developer‚Äù and prints out the words it‚Äôs made of.

Then, use a for loop to loop over the full sentence, and print - at the end - only the longest word of the sentence.
Do the same program, but now looping over the sentence with a while loop.

Create a program that scans only the first 6 words (so ‚Äú"Deleting an item from a list‚Äù) and prints only the UNIQUE letters in this sentence.

The first 2 parts of this problem were Ok, but the last part i became hung up on and did not complete.


Problem 3 (15 points). Open a text file and name it hw7_support_funct.py . Do not write the function on the Jupyter notebook you may be using, as it will store the function in its memory and you may think that you imported from the .py file when you didn‚Äôt. If you chose to test the code on the Jupyter notebook, use a different name for your function in the two locations so that you can separate the two.

In the hw7_support_funct.py create a function circle(x,x0,y0,r) that takes as input an array x, the coordinates of the center of the circle (x0,y0) and a radius r and return all y coordinates of the circle with radius r. Remember that a circle follows the: (x-x0)2+(y-y0)2 = r2. Write an appropriate informative docstring. Go in your main homework file and import the function circle. Call it for (x0,y0)= (2,2), x = - 8.+0.1*np.arange(220) and r =10. Use the y coordinates to plot the circle (if you get only half a circle, why is that? Explain and fix your function to return both values).

This problem was difficult as my function was not wanting to work properly, then when i tried to show the positive values it was not reading my new variable and i tried several different thing. ultimately i had to stop.


Problem 4 (15 points). In the hw7_support_funct.py create a function order_array(input_array) that takes as input an array of numbers and orders them from smaller to larger (don‚Äôt use any predefined function -numpy or otherwise- though!). Write an appropriate and informative docstring. Save it in your hw7_support_funct.py. Import the function in the main homework folder and call it for the array: np.array([4,5,2,10,42,22,8,12]). Now use the appropriate numpy function to test your results.
This one was probably the worst for me as i tried to create the function but when i finally did it would not re organize the numbers like they should. once i plugged in the numpy way it worked but it looks like my function may be broken.


Problem 5 (5 points). You are given array my_data = np.arange( 1, 26 ).reshape( (5, 5) ). Access and print the numbers 4 9 14 19 24. Scan my_data with a for/if structure and find the maximum. Calculate the mean of the my_data using a for/if. How could you get the maximum and mean, much faster?

This problem was the easiest out of the 6. although it would have been easier to just use numpy max and mean functions.

Bonus problem 6 (5 points). Code a program that will print the following 1-0 pyramid.  
 i did not atttempt this even though i should have.

Problem 7 (10 points).  Prepare and submit your homework. Copy the finalized Jupyter  
notebook to the handin/hw7_* folder and don‚Äôt forget to commit and push it to  
GitHub. Explain what you did to do that in your log. Make a screenshot that shows you  
committed the file and add it to your handin/hw7_* folder (remember to use an  
appropriate name for the screenshot!). Write what you did to make and submit the zip  
file into your log. When satisfied, close the log, copy it to your homework directory one  
last time, and make the zip file. Turn the file in on WebCourses.

commited the files to git hub and then created a zip file and submitted it.


**** Oct 19 2:34 Pm EST 2022 ****

Start of midterm


Problem 1 (5 points total).
A) (2 points) Start by making a new folder under HW/ called Midterm/. Your main homework file is this Jupyter notebook. Remember to rename it to midterm_<username>.ipynb. Save it under Midterm/ . Remember to commit your file often and push to GitHub. Note that Github also serves as a great backup and will help you to submit something if an unexpected problem appears before the deadline (e.g., your laptop breaks). We will check this as part of your grading!
Your name, assignment number, and the date should appear as comments at the top using markdown. Any remarks or written answers you may make should be written using Markdown. If you need to comment something in the code (for clarity) do so with a normal comment. Use the print() function to print, don‚Äôt just type the expression.

B) (3 points). For this program you will need the numerical module of Python. Do the appropriate import.

These are plain and simple, we do this every homework.

Problem 2 (20 points total). Let‚Äôs start our program!
A) (4 points) We need to inform the user of our navigation system that we need from them a start and ending point for their trip. Print an informative sentence that lets the user know that we need them to input two cities (start_city, target_city). Their available options should be: Atlanta, Baltimore, Boston, Charlotte, Dallas, Denver, Jacksonville, Minneapolis, Orlando, Sacramento, Tampa and Washington (let the user know this!).
was a simple print statement

B) (4 points) Ask the input start_city and target_city for your trip
Created a function with the user input.

C) (4 points) Make a list cities_list with all the names of the possible cities the traveler can go from/to.
created a list of cities and then printed them to tell the user.

D) (4 points) Check if the input start and target cities are among the cities the traveler is allowed to travel to/from. If not, print an error statement that asks them to input another, appropriate city.
Used if else statements to tell the user if their inputs are in the list of cities.

E) Screenshot running the code

***Out: Oct 19 11:59 Pm EST 2022***

***In: Oct 20 9:00 Am EST 2022 ***
Problem 3 (20 points total).
A) (3 points) From Webcourses/Files/Midterm project get file ‚Äúdistances_midterm.dat‚Äù. This file contains the total distance on the route between city A and B. If you open the file, you will see that it contains a 12 x 12 table (as we have 12 cities we can travel between) with the distances between cities. The ùëñùë°‚Ñé line and ùëñùë°‚Ñé column are a given city, so that the diagonal is 0s (as the distance from A to A is zero). The distance between Atlanta and Baltimore, e.g., is 678 miles so that line 0 (#5 of the file) column 1 of your data (i.e., the distance from Atlanta to Baltimore) is 678 (note that the same is true for line 1 [-Baltimore], column 0[-Atlanta] as this is the distance from Baltimore to Atlanta). Use the appropriate numpy function to read the data into variable travel_data.
Called the city list, got the data from the file and then print it.

B) (4 points) Find which cities the traveler wants to travel from/ to. Use your preferred method to get the index of the cities (assign to variables first_city and second_city) from your list.
create indexs with the cities by taking the inputs.

C) (4 points) Using the travel_data and indexes first_city and second_city, find the distance the traveler will travel. Print an informative statement to let the driver know what the distance between their start and end city are.
created a distance formula and then printed it.

D) (5 points) Assume that the traveler can travel at an average speed of 75mph. Calculate the average travel time it will take them to go from their start_city to their target_city. Calculate how many days ( travel_time_days ), hours ( travel_time_hours ) and minutes ( travel_time_minutes ) the trip will take. Print an informative statement that lets the traveler know how long their trip will be in days, hours and minutes.
created a function to find out the time length to the city

E) tested the function and took a screen shot

Problem 4 (15 points total).
We will now change the existing program to add an extra city as a pitstop. Let‚Äôs make a cross-country road trip from Boston to Sacramento via Denver. Modify your Problem 3 code and function as follows:
A) (2 points) We will now ask the input start_city, a pitstop_city and a target_city for the trip.

Took the the code from above and added a third city

B) (2 points) Update your function to find which cities the traveler wants to travel from, pitstop at, and go to in your list of cities. Use your preferred method to get the index of the cities (first_city, second_city and third_city) from your list.
Updated the function created in 3f and took the inputs from the user for the cities wanted

C) (4 points) Use the above indices and your travel_data to find the distance between first_city - second_city and second_city-third_city. Assuming that your traveler‚Äôs car can do 24.9 mpg on the highway and their tank holds 16gallons, calculate how many refueling stops they will need to do on the first and the second leg of their trip Assume that you start the trip with a full tank and round the numbers (e.g., needing 3.2 stops doesn‚Äôt make sense). Print an informative statement that lets the traveler know how many stops they will need to do on the two legs of their trip.
created a function to find the distance from the cities and how many gas stops would be needed.

D) (4 points) Assume an average price of $2.4 per gallon and calculate how much the trip will cost in fuel. Print an informative statement that lets the traveler know the total (gas-only) value of their trip.
Finding how much the trip would cost in gas

E) (3 points) Did it all work? Run the code for start_city: Boston, pitstop_city: Denver and target_city: Sacramento.
Ran the code with the given parameters and then took a screen shot. this was the most difficult problem out of all.

Problem 5 (20 points total)
Let‚Äôs try to do a basic navigation code using all our previous parts.
A) (3 points) Adapt the code by again asking the traveler to only give you a start city and destination city. You will need to then adapt the function from Problem 4 as follows:
Removed the pitstop from this portion of the code and took the user input.

B) (15 points total) The basis of a navigation program is to get your from A to B in the shortest distance/time possible. Let‚Äôs try to do this!
1. (3 points) Get the indexes of the cities you start from (start_city) and want to end at (second_city).
called the index

2. (10 points) You now need to scan the travel_data table to find the right pitstop city that takes you from A to B in the minimum total distance. Make sure that the straight A to B option is not taken into account, as we need to do a pitstop in some city C. Scan all possible combinations A-->C,C-->B and keep the index (min_tot_dist_ind) of pitstop city C that minimizes the total distance (A-->C) + (C-->B). Print an informative statement that lets the traveler know that they will need to stop in city C, and what the total distance traveled will be.
‚ÄãTakes and creates a code that tells you the closes pitstop city to you location.

3. (2 points) Run this program for a trip from Baltimore to Orlando. What is your pitstop city?
Pitstop city is washington and just took the code from part 2 and used Baltimore and Orlando

4. (2 points) Change your function to let the traveler know where they will need to stop, how many stops for gas they will need to do in every leg of the trip and how much the total gas cost of the trip will be. Run it for a trip from Baltimore to Orlando.

***Oct 20 1:20 PM EST 2022***

***Oct 24 11:50 PM EST 2022***

Problem 6 (10 points)
Prepare and submit your homework. Write what you did to make and submit the zip file into your log. Don‚Äôt forget to commit your finalized code and push it to GitHub. When satisfied, close the log, copy it to your homework directory one last time, and run the commands to make and submit the zip file. Turn the file in on WebCourses.
Comitted to GitHub and screenshot, then compressed the file and upload.

***Oct 24 12:18 AM EST 2022***

***In: Nov 2 1:37 Pm EST 2022***

Problem 1 (5 points). Make a new folder named hw8_<yourname> under you handin 
folder. As always, your log is part of your homework. After each problem number, give 
your answer and the names of any files you are handing in for each problem. If you 
made a HW8 entry in your log in a prior session and want to change it, just copy it to the 
current (last) session, and edit there. We will grade the last entry only. All text related to 
one assignment should be in one entry, with the problems done in order.
 Completed

Problem 2. (20 points) In the early 17th century Kepler used observations of the motions of planets in our Solar System to derive his now famous laws of planetary motion. According to these laws, all planets in our Solar system move around in elliptical orbits with the Sun in one focus (1st law), their speed varies along the orbit with the further they are from the Sun the slower they move (2nd law) and their orbits are such that the square of their period is proportional to the cube of their (average) distance to the Sun (3rd law). Here you will test the validity of the 3rd law to planets of our Solar system and extrapolate it to constrain the orbital distance of three exoplanets from their parent stars. In a file hw8_support_funct.py make a function called kepler_3rd(period) that gets as input the orbital period of a planet in years and returns the orbital distance of a planet to the Sun. This function should use the simple approximation for the 3rd law: ùëÉ^2 ‚àù Œ±^3, since it will focus on planets of our Solar system. From Kepler‚Äôs 3rd law ùëÉ^2/ùõº^3= constant, so you can deduce that ùëÉ^2/P^2 (sub)2 = ùõº^1 (sub)3/ùëé^2 (sub)3. Use this equation in your function. Write an appropriate docstring. Use the (P,Œ±) properties of our Earth as the reference point (P1,Œ±1). Remember that the period of our Earth is 1 year or 365.25 days and a_orb = 1 AU (1 Astronomical Unit ~ 150,000,000km or 92,967,000 miles). Import the function in your main homework .py and calculate the distances of the other planets of our Solar system using the observed periods from the following table:

Planet Period [days]

Mercury 87.96

Venus 224.7

Mars 686.97

Jupiter 4332.82

Saturn 10775.6

Uranus 30687.15

Neptune 60190.03

How do the values you get compare to the actual distances of the planets (0.4 AU ; 0.7 AU ; 1.524 AU ; 5.2 AU ; 9.6 AU ; 19.2 AU and 30.1AU ) ? Make a plot that compares the real distances with the ones you retrieve from Kepler's law. Make sure you specify manually different symbols and colors for the two sets (predicted and real distances).

	This Problem was the easiest of the 3. The bonus points were also somewhat easy as all that was needed was to create a list and then call the list for x.

Problem 3 (20 points) Do your homework(!) In Python. a) (5 points) Choose any problem from a recent homework assignment or other assessment in another class that involves something you need to calculate or derive and that you can plot. State the class, section, assignment, and item number. State (or take a photo/ make a screenshot of) the problem. State (or take a photo/ make a screenshot of) your solution as given in that class (corrected by you).

b) (15 points) Now, code your solution and make and save one or more plots. Your code must use two or more of: control flow structures (conditional, loops, function calls), when possible, avoid loops and use NumPy array math (you‚Äôll get bonus 5 points for actively doing this, provided it is appropriate), broadcasting, string formatting, reading or writing data to/from a file, masks. However, everything you write should be natural and belong in the code.
	This Question took me pretty much just as long as the 4th question except this was much more frustrating because there was not a CLEAR exact answer of what was wanted. It said for loops could be used, but then said to use something else instead of loops. I did not use loops so it was not a huge deal but it was confusing. I used Hw4 and just created a .dat file from the data given for the last half of question 2 as the first half was simple multiplication not using a function. after creating the .dat file i called it and then printed it to show it worked. then i created an array and imported the function outputting all the accelerations.
***OUT: NOV 2 6:00 Pm EST 2022***

***IN: NOV 3 9:00 Am EST 2022***
Problem 4 (15 points) Graduation season is coming, and you need to buy presents for all your friends graduating! Surprising your friends with many little presents which you hide in one big box is more fun than getting them one big present. The logistics though, are hard. To prepare for that, you need to find out how much wrapping paper you will need for the boxes and how many presents you can fit in every box! Create a class graduation_presents that uses the dimensions a,b,c of a box to calculate the box‚Äôs surface area and volume. Assume that your dimensions are in inches. The class should also know how much wrapping paper you have (in inches2 ) and how many presents you want to fit in your box. Use a proper initiation function. Your class should contain: a) An initiation function b) a function that returns the surface area of the box (named, e.g., surface_area), c) a function that returns the volume of the box (e.g., volume), d) a function that checks if you have enough wrapping paper to cover your box (enough_paper) e) a function that checks if your box can fit all the presents (fits; assuming that the average volume of a gift is 25 inches3 ) and f) a function (print_gift) that combines all these information and lets you know (with print() statements) if you have enough wrapping paper to wrap your box, if your gifts fit in the box, or if nothing is right. Test it for the following combinations: a b c number_of_gifts wrap_paper_available 10 10 10 15 800 10 10 10 55 1000 100 20 10 55 300
	This was Very difficult but once it was figured out it seemed simple

Problem 5 (10 points). Prepare and submit your homework. Write what you did to 
make and submit the zip file into your log. Don‚Äôt forget to commit your finalized 
notebook and push it to GitHub. When satisfied, close the log, copy it to your homework 
directory one last time, and make the zip file. Turn the file in on WebCourses
	Saved the file, and compressed it into a Zip file. Then opened up Github on my laptop, and commited it to main, and then pushed it to my github. Decieded not to do a screenshot since it said put it in the log or screenshot. Then i submitted it to webcourses.
***OUT NOV 3 10:58 Am EST 2022***